/**
 * @fileoverview Firestore Security Rules for CampusConnect India.
 *
 * Core Philosophy:
 * This ruleset allows public read access to all data (events, clubs, benefits) and disables write access, as the data is intended to be managed by administrators through other means (e.g., a separate admin panel or direct database updates).  This is for the Prototyping Phase where no client-side writes are needed.
 *
 * Data Structure:
 * - /events/{eventId}: Stores event information.
 * - /clubs/{clubId}: Stores club information.
 * - /benefits/{benefitId}: Stores benefit information.
 *
 * Key Security Decisions:
 * - Public read access is granted to all collections.
 * - All write operations (create, update, delete) are explicitly denied to client applications, since no auth is required to view data.
 * - No ownership checks or role-based access control is implemented in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to events and denies all write operations.
     * @path /events/{eventId}
     * @allow get, list: Any unauthenticated user can read event data.
     * @deny create, update, delete: No user can create, update, or delete event data.
     * @principle Public read, no client-side writes.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to clubs and denies all write operations.
     * @path /clubs/{clubId}
     * @allow get, list: Any unauthenticated user can read club data.
     * @deny create, update, delete: No user can create, update, or delete club data.
     * @principle Public read, no client-side writes.
     */
    match /clubs/{clubId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to benefits and denies all write operations.
     * @path /benefits/{benefitId}
     * @allow get, list: Any unauthenticated user can read benefit data.
     * @deny create, update, delete: No user can create, update, or delete benefit data.
     * @principle Public read, no client-side writes.
     */
    match /benefits/{benefitId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}