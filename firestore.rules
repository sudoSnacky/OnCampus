/**
 * @fileoverview Firestore Security Rules for CampusConnect India.
 *
 * Core Philosophy:
 * This ruleset provides open read access to all data (events, clubs, benefits)
 * and restricts write access to only authenticated users. This is suitable for
 * a static website where all content is intended to be public and managed by
 * authorized administrators via a separate backend process.
 *
 * Data Structure:
 * - /events/{eventId}: Stores information about campus events.
 * - /clubs/{clubId}: Stores information about student clubs.
 * - /benefits/{benefitId}: Stores information about college ID benefits.
 *
 * Key Security Decisions:
 * - Public Read Access: All collections are publicly readable to allow for
 *   easy display on the static website without authentication.
 * - Authenticated Writes: All write operations (create, update, delete) are
 *   restricted to authenticated users. Specific authorization checks based on
 *   roles or ownership are not implemented in this prototyping phase.
 *
 * Denormalization for Authorization:
 * Not applicable in this scenario because all data is public.
 *
 * Structural Segregation:
 * All collections are top-level and publicly readable, simplifying the
 * security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read events, but only authenticated users can create, update, or delete them.
     * @path /events/{eventId}
     * @allow (get, list)
     * @deny (create)
     * @principle Allows public read access and authenticated writes.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read clubs, but only authenticated users can create, update, or delete them.
     * @path /clubs/{clubId}
     * @allow (get, list)
     * @deny (create)
     * @principle Allows public read access and authenticated writes.
     */
    match /clubs/{clubId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read benefits, but only authenticated users can create, update, or delete them.
     * @path /benefits/{benefitId}
     * @allow (get, list)
     * @deny (create)
     * @principle Allows public read access and authenticated writes.
     */
    match /benefits/{benefitId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // Helper function to check if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}